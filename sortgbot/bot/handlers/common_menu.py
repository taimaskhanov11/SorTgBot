from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from sortgbot.bot import markups
from sortgbot.bot.filters.main_filter import MainFilter
from sortgbot.bot.scenario.scenario import scenarios, Scenario
from sortgbot.bot.states.create_summation import CreateSummation, UploadSummation
from sortgbot.bot.utils.main_helpers import channel_status_check
from sortgbot.db.models import User


class ChoiceLang(StatesGroup):
    choice = State()


async def main_start(message: types.Message, state: FSMContext, user: User):
    # user.language = None
    # await user.save(update_fields=["language"])
    await state.finish()

    if not await channel_status_check(message.from_user.id):
        await message.answer("üá∑üá∫–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
                             "üá∞üáø–ë–æ—Ç—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω—É “Ø—à—ñ–Ω –∞—Ä–Ω–∞–ª–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—É –∫–µ—Ä–µ–∫\n"
                             "–ö–∞–Ω–∞–ª—ã: https://t.me/schoolhack1 https://t.me/schoolprokz")
        return

    await message.answer("üá∑üá∫–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?\nüá∞üáø“ö–∞–π —Ç—ñ–ª–¥–µ –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É –∫–µ—Ä–µ–∫?",
                         reply_markup=markups.lang_choice)
    await CreateSummation.first()


async def choice_lang(message: types.Message, state: FSMContext, user: User):
    if message.text.startswith("üá∞üáø"):
        user.language = "kazakh"
    elif message.text.startswith("üá∑üá∫"):
        user.language = "russian"
    await user.save()
    # await message.answer("–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–µ–¥–∏—Ç–µ /start", reply_markup=markups.start_button)
    # await state.finish()
    scenario = scenarios.get(user.language)
    await message.answer(scenario.grade.title, reply_markup=scenario.grade.keyboard)
    await CreateSummation.next()


async def grade(message: types.Message, state: FSMContext, scenario: Scenario):
    await state.update_data(grade=message.text)
    await message.answer(scenario.quarter.title, reply_markup=scenario.quarter.keyboard)
    await CreateSummation.next()


async def quarter(message: types.Message, state: FSMContext, scenario: Scenario):
    await state.update_data(quarter=message.text)
    await message.answer(scenario.subject.title, reply_markup=scenario.subject.keyboard)
    await CreateSummation.next()


async def subject(message: types.Message, state: FSMContext, scenario: Scenario):
    await state.update_data(subject=message.text)
    await message.answer(scenario.sorsoch.title, reply_markup=scenario.sorsoch.keyboard)
    await CreateSummation.next()


async def sorsoch(message: types.Message, state: FSMContext, scenario: Scenario):
    await state.update_data(sorsoch=message.text)
    data = await state.get_data()
    if data.get("is_admin"):
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É–º–º–∞—Ç–∏–≤–∫–∏\n"
                             "–í–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await UploadSummation.first()
    else:
        await message.answer(str(data))
        await state.finish()


def register_common_handlers(dp: Dispatcher):
    dp.register_message_handler(main_start, MainFilter(), commands="start", state="*")

    dp.register_message_handler(choice_lang, MainFilter(), state=CreateSummation.choice_lang)
    dp.register_message_handler(grade, MainFilter(), state=CreateSummation.grade)
    dp.register_message_handler(subject, MainFilter(), state=CreateSummation.subject)
    dp.register_message_handler(quarter, MainFilter(), state=CreateSummation.quarter)
    dp.register_message_handler(sorsoch, MainFilter(), state=CreateSummation.sorsoch)
